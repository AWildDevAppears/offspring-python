import* "./maps/*.pkl" as maps
import* "./items/*.pkl" as items
import* "./item_modifiers/*.pkl" as item_mods
import* "./cards/*.pkl" as cards

class Pawn {
    behaviour: String
}

class Behaviour {
}

AI: Mapping<String, Behaviour> = new {

}

NPCS: Mapping<String, Pawn> = new {

}

class Structure {
}

STRUCTURES: Mapping<String, Structure> = new {

}

class Location {
    id: String
    name: String
}

MAPS: Mapping<String, Location> = maps
    .toMap()
    .mapKeys((key, val) -> key.drop(key.indexOf(Regex("[0-9]"))).dropLast(4))
    .mapValues((_, val) -> val.toDynamic().toTyped(Location))
    .toMapping()

typealias EquipSlot = "Weapon"|"Chest"|"Head"|"Legs"|"Feet"|"Hands"|"Trinket"

class Equipment {
    id: String
    name: String
    description: String
    type: EquipSlot
    defence: Int?
    minDamage: Int?
    maxDamage: Int?
}

ITEMS: Mapping<String, Equipment> = items
    .toMap()
    .mapKeys((key, val) -> key.drop(key.indexOf(Regex("[0-9]"))).dropLast(4))
    .mapValues((_, val) -> val.toDynamic().toTyped(Equipment))
    .toMapping()

class ItemModifierEffect {
    target: String
    effect: "increase_static" | "increase_percentage" | "decrease_static" | "descrease_percentage" | "absorb_static" | "absorb_percentage"
    amount: Int
    on: "equip" | "turn" | "attack"
}

class ItemModifier {
    id: String
    name: String
    effect: ItemModifierEffect
}

ITEM_MODIFIERS: Mapping<String, ItemModifier> = item_mods
    .toMap()
    .mapKeys((key, val) -> key.drop(key.indexOf(Regex("[0-9]"))).dropLast(4))
    .mapValues((_, val) -> (val) {
            effect = val.effect.toTyped(ItemModifierEffect)
        }
        .toDynamic()
        .toTyped(ItemModifier))
    .toMapping()

class CardModifier {
    id: Int
    turns: Int
    amount: Int
    mode: "apply" | "negate"
}

class Card {
    name: String
    description: String
    damage: Int
    target: "self" | "enemy" | "enemy_all" | "all" | "arena" | "spell"
    modifiers: List<CardModifier>
}

CARDS  = cards
    .toMap()
    .mapKeys((key, value) -> key.drop(key.indexOf(Regex("[0-9]"))).dropLast(4))
    .mapValues((_, val) -> (val) {
            modifiers = val.modifiers.toList().map((val) -> val.toTyped(CardModifier))
        }.toDynamic().toTyped(Card))
    .toMapping()

